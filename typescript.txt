// tsconfig.json file creation command - For regular javascrip application (no frameworks like react/vue/angular)
1. first we need to install typescript with command - npm install typescript -g
2. now we will initialize typscript with the command 'tsc init', and it will create tsconfig.json file for us where we need to set some things up
3. compiling command - tsc -w (-w watch will make sure we don't need to compile after every time we make some changes



// Declaring variables
const num: number = 5
const str: string = "Hello world"
const condition: boolean = false
const mixedVariable: string | number | boolean = 5 // Can be initialized with a string or boolean as well, as it's a mixed type of string or number or boolean

Note: mixed type variables are called union types


// Declaring Arrays
// Normal Arrays
const numbers: number[] = [4, 6, 1, 90, 34] // We could initialize an empty array here or provide values
const strings: string[] = ["ABC", "DEF", "XYZ"] // We could initialize an empty array here or provide values
const mixedTypesArray: (string | number | boolean)[] = [5, "Hello", false] // Mixed type arrays ara called union types

// Array of objects
const persons: { name: string, age: number, isLoggedIn: boolean } [] = [{ name: "Rafez", age: 35, isLoggedIn: false }, { name: "Ubaid", age: 4, isLoggedIn: true }]

* or we could define a type first and then use that type to declare an array of objects
type Person = { name: string, age: number, isLoggedIn: boolean }
const persons: Person [] = [{ name: "Rafez", age: 35, isLoggedIn: false }, { name: "Ubaid", age: 4, isLoggedIn: true }]

Note: 



// Declaring Objects

const person1: {name: string, age: number, isLoggedIn: boolean} = {name: "Rafez", age: 35, isLoggedIn: true}

* Or we could define a type first and use that type to declare an object
type Person = { name: string, age: number, isLoggedIn: boolean }
const person1: Person = {name: "Rafez", age: 35, isLoggedIn: true}

Note: 


// Functions

// Functions without parameters
const greet: Function = (): string => "Hello" // ': string' after paranthesis means this function must only return a value type of which is string
const greet: Function = (): void => console.log("Hello") // ': void' after paranthesis means this function won't return any value 

// Functions with parameters
// Regular function with parameters
const calculate: Function = (a: number, b: number): number | string => a + b // takes in two parameters of type number and returns a number or string

// Function with optional parameters
const getName: Function = (a: string, b: string, c?: string): string => a + " " + b // question mark (?) after c means it is an optional parameter

// Function with default value of a parameter
const getName: Function = (a: string, b: string, c: string = "good"): string => a + b + c // if third parameter isn't provided then c will have default value good

// Saving a function's return value in a variable
const result: string = getName("Rafez", "Rahman", "is Bad")

Note: We only need to define type if functions are declared with var, let or const keywords




// DOM And Type Casting

1. (!) Exclamation mark is used to tell typescript that html element I am trying to grab exists so don't give me any warning. For example - 
const anchor = document.querySelector("a");
// Typescript will give us warning if we try to access the href property of the anchor tag because typescript infers that value of this anchor tag could be null. 
// So we must explicitly tell typescript that anchor tag exists by putting an ! at the end like this - const anchor = document.querySelector("a")!;
console.log(anchor.href); 
// Or we could avoid using ! this way - const anchor = document.querySelector("a") as HTMLAnchorElement;

2. It's better to define which element it is, like if we are grabbing a html form element by class "add_blog_form" then we can grab this form element by following way
const addBlogForm = document.querySelector(".add_blog_form") as HTMLFormElement
